[{"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\index.tsx":"1","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\MainMenu\\MainMenu.tsx":"3","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\ContactPage\\ContactPage.tsx":"4","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\UserLoginPage\\UserLoginPage.tsx":"5","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\HomePage\\HomePage.tsx":"6","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\CategoryPage\\CategoryPage.tsx":"7","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\api\\api.ts":"8","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\config\\api.config.ts":"9","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\UserRegistrationPage\\UserRegistrationPage.tsx":"10"},{"size":1846,"mtime":1612267373920,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1395,"mtime":1611329911044,"results":"14","hashOfConfig":"12"},{"size":795,"mtime":1611329832978,"results":"15","hashOfConfig":"12"},{"size":4781,"mtime":1611918606770,"results":"16","hashOfConfig":"12"},{"size":2794,"mtime":1612446479962,"results":"17","hashOfConfig":"12"},{"size":8954,"mtime":1612525106433,"results":"18","hashOfConfig":"12"},{"size":4494,"mtime":1611915709108,"results":"19","hashOfConfig":"12"},{"size":180,"mtime":1612522882941,"results":"20","hashOfConfig":"12"},{"size":7752,"mtime":1612259474808,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"res0r1",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\index.tsx",[],["46","47"],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\MainMenu\\MainMenu.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\ContactPage\\ContactPage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\UserLoginPage\\UserLoginPage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\HomePage\\HomePage.tsx",["48","49"],"import React from 'react';\nimport { Button, Card, Col, Container, Row } from \"react-bootstrap\";\nimport { faListAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { isConstructorDeclaration } from 'typescript';\nimport { Link, Redirect } from 'react-router-dom';\nimport CategoryType from '../../types/CategoryType';\nimport api, { ApiResponse } from '../../api/api';\n\ninterface HomePageState{\n  isUserLoggedIn: boolean;\n  categories: CategoryType[];\n}\n\ninterface ApiCategoryDto{\n  categoryId: number;\n  name: string;\n}\n\nclass HomePage extends React.Component{\n  state: HomePageState;\n\n  constructor(props: Readonly<{}>){\n    super(props);\n\n    this.state = {\n      isUserLoggedIn: true,\n      categories: []\n    }\n  }\n\n  componentWillMount(){\n    this.getCategories();\n  }\n\n  componentWillUpdate(){\n    this.getCategories();\n  }\n\n  private getCategories(){\n    api('api/category/?filter=parentCategoryId||$isnull', 'get', {})\n    .then((res: ApiResponse) => {\n      if(res.status === 'error' || res.status === 'login'){\n        this.setLogginState(false);\n        return;\n      }\n\n      this.putCategoriesInState(res.data);\n    });\n  }\n\n  private putCategoriesInState(data: ApiCategoryDto[]){ \n    const categories: CategoryType[] | undefined = data?.map(category => {\n      return {\n        categoryId: category.categoryId,\n        name: category.name,\n        items: []\n      };\n    });\n\n    const newState = Object.assign(this.state, {\n      categories: categories,\n    });\n\n    this.setState(newState);\n  }\n\n  private setLogginState(isLoggedIn: boolean){\n    const newState = Object.assign(this.state, {\n      isUserLoggedIn: isLoggedIn\n    });\n\n    this.setState(newState);\n  }\n\n  render(){\n    if(this.state.isUserLoggedIn === false){\n      return(\n        <Redirect to=\"/user/login\" />\n      );\n    }\n\n    return (\n      <Container>   \n        <Card>\n            <Card.Body>\n              <Card.Title>\n                    <FontAwesomeIcon icon = { faListAlt } /> Top level categories\n              </Card.Title>\n\n              <Row>\n                {this.state.categories.map(this.singleCategory)}\n              </Row>  \n\n            </Card.Body>\n        </Card>  \n      </Container>\n    );\n  }\n  \n  private singleCategory(category: CategoryType){\n    return (\n      <Col lg=\"3\" md=\"4\" sm=\"6\" xs=\"12\">\n        <Card className=\"mb-3\">\n          <Card.Body>\n            <Card.Title as=\"p\">\n              { category.name }\n            </Card.Title>\n            <Link to={`/category/${ category.categoryId }`}\n                  className=\"btn btn-primary btn-block btn-sm\">\n              Open category\n            </Link>         \n          </Card.Body>\n        </Card>\n      </Col>\n    );\n  }\n  \n}\n\nexport default HomePage;\n","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\CategoryPage\\CategoryPage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\api\\api.ts",["50"],"import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { ApiConfig } from \"../config/api.config\";\r\n \r\nexport default function api(\r\n    path: string,\r\n    method: 'get' | 'post' | 'patch' | 'delete',\r\n    body: any | undefined\r\n){\r\n    return new Promise<ApiResponse>((resolve) => {\r\n        const requestData = {            \r\n            method: method,\r\n            url: path,\r\n            baseURL: ApiConfig.API_URL,\r\n            data: JSON.stringify(body),\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getToken(),\r\n            }            \r\n        };\r\n \r\n        axios(requestData)\r\n        .then(res => responseHandler(res, resolve))\r\n        .catch(async err => {\r\n                // STATUS CODE 401 - Bad Token\r\n                // TODO: Refresh tokena i pokusati ponovo\r\n                //       Ne mozemo da osvezimo token, preusmeriti korisnik na login\r\n                if(err.response.status === 401){\r\n                    const newToken = await refreshToken();\r\n \r\n                    if(!newToken){\r\n                        const response: ApiResponse = {\r\n                            status: 'login',\r\n                            data: null\r\n                        };\r\n \r\n                        return resolve(response);\r\n                    }\r\n \r\n                    saveToken(newToken);\r\n \r\n                    requestData.headers['Authorization'] = getToken();\r\n \r\n                    return await repeatRequest(requestData, resolve);\r\n                }\r\n \r\n            const response: ApiResponse = {\r\n                status: 'error',\r\n                data: err,\r\n            };\r\n            resolve(response);\r\n        });\r\n    });   \r\n}\r\n \r\nexport interface ApiResponse{\r\n    status: 'ok' | 'error' | 'login';\r\n    data: any;\r\n \r\n}\r\n \r\nasync function responseHandler(\r\n    res: AxiosResponse<any>,\r\n    resolve: (value: ApiResponse) => void,    \r\n){\r\n    // nepovoljan ishod kada server ne odradi posao\r\n    if(res.status <200 || res.status >= 300){       \r\n \r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: res.data\r\n        };\r\n \r\n        return resolve(response);\r\n    }\r\n \r\n    // nepovoljan ishod kada aplikacija ne odradi posao\r\n    let response: ApiResponse = {\r\n        status: 'ok',\r\n        data:res.data\r\n    };    \r\n \r\n    if(res.data.statusCode < 0){\r\n        response = {\r\n            status: 'login',\r\n            data: null\r\n        };        \r\n    }else{\r\n        response = {\r\n            status: 'ok',\r\n            data: res.data\r\n        };\r\n    }\r\n \r\n    resolve(response);\r\n}\r\n \r\nfunction getToken(): string{\r\n    const token = localStorage.getItem('api_token');\r\n    return 'Berer ' + token;\r\n}\r\n \r\nfunction saveToken(token: string){\r\n    localStorage.setItem('api_token', token);\r\n}\r\n \r\nfunction getRefreshToken(): string{\r\n    const token = localStorage.getItem('api_refresh_token');\r\n    return token + '';\r\n}\r\n \r\nfunction saveRefreshToken(token: string){\r\n    localStorage.setItem('api_refresh_token', token);\r\n}\r\n \r\nasync function refreshToken(): Promise<string>{\r\n    const path = \"auth/user/refresh\";\r\n    const data = {\r\n        token: getRefreshToken()\r\n    }\r\n \r\n    const refreshTokenRequestData: AxiosRequestConfig = {            \r\n        method: 'post',\r\n        url: path,\r\n        baseURL: ApiConfig.API_URL,\r\n        data: JSON.stringify(data),\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }            \r\n    };\r\n \r\n    const refreshTokenResponse: { data: { token: string | undefined } } = await axios(refreshTokenRequestData);\r\n \r\n    if(!refreshTokenResponse.data.token){\r\n        return \"\";\r\n    }\r\n \r\n    return refreshTokenResponse.data.token;\r\n}\r\n \r\nasync function repeatRequest(\r\n    requestData: AxiosRequestConfig,\r\n    resolve: (value: ApiResponse | Promise<ApiResponse>) => void\r\n) {\r\n    axios(requestData)\r\n    .then(res => {\r\n        let response: ApiResponse\r\n \r\n        if(res.status === 401){\r\n            response = {\r\n                status: 'login',\r\n                data: null\r\n            };\r\n        }else{\r\n            response = {\r\n                status: 'ok',\r\n                data: res,\r\n            };\r\n        }\r\n \r\n        return resolve(response);\r\n    })\r\n    .catch(err => {\r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: err\r\n        }\r\n        return resolve(response);\r\n    });\r\n}","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\config\\api.config.ts",["51"],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\UserRegistrationPage\\UserRegistrationPage.tsx",["52"],"import { faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { Alert, Button, Card, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { StringLiteralLike } from \"typescript\";\r\nimport api, { ApiResponse } from \"../../api/api\";\r\n\r\ninterface UserRegistrationPageState{\r\n    formData: {\r\n        email: string;\r\n        password: string;\r\n        forename: string;\r\n        surename: string;\r\n        phone: string;\r\n        address: string;\r\n    };\r\n\r\n    message?: string;\r\n\r\n    isRegistrationComplete: boolean;\r\n}\r\n\r\nexport class UserRegistrationPage extends React.Component{\r\n    state: UserRegistrationPageState;\r\n\r\n    constructor(props: Readonly<{}>){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isRegistrationComplete: false,\r\n            formData: {\r\n                email: '',\r\n                password: '',\r\n                forename: '',\r\n                surename: '',\r\n                phone: '',\r\n                address: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    private formInputChanged(event: React.ChangeEvent<HTMLInputElement>){\r\n        const newFormData = Object.assign(this.state.formData, {\r\n            [event.target.id]: event.target.value,\r\n        })\r\n\r\n        const newState = Object.assign(this.state, {\r\n            formData: newFormData            \r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Container>  \r\n                <Col md={{ span:8, offset:2 }} >\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>\r\n                                <FontAwesomeIcon icon = { faUserPlus } /> User Registration\r\n                            </Card.Title>                            \r\n                                {\r\n                                    (this.state.isRegistrationComplete === false) ?\r\n                                    this.renderForm() :\r\n                                    this.renderRegistrationCompleteMessage()\r\n                                }\r\n                        </Card.Body>\r\n                    </Card> \r\n                </Col>                 \r\n            </Container>    \r\n        );    \r\n    }\r\n\r\n    private renderForm(){\r\n        return(\r\n            <>\r\n                <Form>\r\n                    <Row>\r\n                        <Col md=\"6\">\r\n                            <Form.Group>\r\n                            <Form.Label htmlFor=\"email\">E-mail:</Form.Label>\r\n                                <Form.Control type=\"email\" id=\"email\"\r\n                                            value={ this.state.formData.email }\r\n                                            onChange={ event => this.formInputChanged(event as any) } />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor=\"password\">Password:</Form.Label>\r\n                                <Form.Control type=\"password\" id=\"password\"\r\n                                            value={ this.state.formData.password }\r\n                                            onChange={ event => this.formInputChanged(event as any) } />\r\n                            </Form.Group>\r\n                        </Col>                    \r\n                    </Row>\r\n                    \r\n                    <Row>\r\n                        <Col md=\"6\">\r\n                            <Form.Group>\r\n                            <Form.Label htmlFor=\"forename\">Forename:</Form.Label>\r\n                                <Form.Control type=\"text\" id=\"forename\"\r\n                                            value={ this.state.formData.forename }\r\n                                            onChange={ event => this.formInputChanged(event as any) } />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md=\"6\">\r\n                            <Form.Group>\r\n                            <Form.Label htmlFor=\"surename\">Surename:</Form.Label>\r\n                                <Form.Control type=\"text\" id=\"surename\"\r\n                                            value={ this.state.formData.surename }\r\n                                            onChange={ event => this.formInputChanged(event as any) } />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    \r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"phone\">Phone number:</Form.Label>\r\n                            <Form.Control type=\"phone\" id=\"phone\"\r\n                                          value={ this.state.formData.phone }\r\n                                          onChange={ event => this.formInputChanged(event as any) } />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor=\"address\">Address:</Form.Label>\r\n                            <Form.Control id=\"address\"\r\n                                          as=\"textarea\" rows={4}\r\n                                          value={ this.state.formData.address }\r\n                                          onChange={ event => this.formInputChanged(event as any) } />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Button variant=\"primary\" onClick={() => {this.doRegister()}}>\r\n                                    Register\r\n                        </Button>\r\n                    </Form.Group>\r\n\r\n                </Form>\r\n\r\n                <Alert variant=\"danger\" className={ this.state.message ? '' : 'd-none' }>\r\n                    { this.state.message }\r\n                </Alert>\r\n            </>\r\n        );\r\n    }\r\n\r\n    private renderRegistrationCompleteMessage(){\r\n        return(\r\n            <p>\r\n                Account has been registered.<br />\r\n                <Link to=\"/user/login\">Click here</Link> to go to the login page.                 \r\n            </p>\r\n        );\r\n    }\r\n\r\n    private doRegister(){\r\n        const data = { // ovo je dto objekat iz bekenda\r\n            email: this.state.formData.email,\r\n            password: this.state.formData.password,\r\n            forename: this.state.formData.forename,\r\n            surename: this.state.formData.surename,\r\n            phoneNumber: this.state.formData.phone,\r\n            postalAddress: this.state.formData.address\r\n        }\r\n\r\n        api('auth/user/register', 'post', data)\r\n        .then((res: ApiResponse) => {\r\n            console.log(res);\r\n\r\n            if(res.status === 'error'){\r\n                this.setErrorMessage('System error... Try again!');\r\n                return;\r\n            }\r\n\r\n            if (res.data.status === 'ok') {\r\n                this.handleErrors(res.data);\r\n                return;\r\n            }\r\n\r\n            this.registrationComplete();\r\n        })\r\n    }\r\n\r\n    private setErrorMessage(message: string) {\r\n        const newState = Object.assign(this.state, {\r\n            message: message,\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    private handleErrors(data: any){\r\n        let message = '';\r\n\r\n        switch(data.statusCode){ // -6001 uzet iz bekenda, user.service.ts, register metoda\r\n            case -6001: message = 'This account already exist!'; break;\r\n        } \r\n        this.setErrorMessage(message);\r\n    }\r\n\r\n    private registrationComplete(){\r\n        const newState = Object.assign(this.state, {\r\n            isRegistrationComplete: true,\r\n        });\r\n\r\n        this.setState(newState);\r\n    }\r\n}",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":16},{"ruleId":"57","severity":1,"message":"61","line":5,"column":10,"nodeType":"59","messageId":"60","endLine":5,"endColumn":34},{"ruleId":"57","severity":1,"message":"62","line":111,"column":10,"nodeType":"59","messageId":"60","endLine":111,"endColumn":26},{"ruleId":"57","severity":1,"message":"63","line":1,"column":10,"nodeType":"59","messageId":"60","endLine":1,"endColumn":17},{"ruleId":"57","severity":1,"message":"64","line":6,"column":10,"nodeType":"59","messageId":"60","endLine":6,"endColumn":27},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'isConstructorDeclaration' is defined but never used.","'saveRefreshToken' is defined but never used.","'TIMEOUT' is defined but never used.","'StringLiteralLike' is defined but never used.","no-global-assign","no-unsafe-negation"]