[{"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\index.tsx":"1","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\reportWebVitals.ts":"2","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\MainMenu\\MainMenu.tsx":"3","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\ContactPage\\ContactPage.tsx":"4","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\UserLoginPage\\UserLoginPage.tsx":"5","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\HomePage\\HomePage.tsx":"6","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\CategoryPage\\CategoryPage.tsx":"7","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\api\\api.ts":"8","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\config\\api.config.ts":"9"},{"size":1759,"mtime":1611387647526,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":1395,"mtime":1611329911044,"results":"13","hashOfConfig":"11"},{"size":795,"mtime":1611329832978,"results":"14","hashOfConfig":"11"},{"size":4781,"mtime":1611918606770,"results":"15","hashOfConfig":"11"},{"size":355,"mtime":1611324508550,"results":"16","hashOfConfig":"11"},{"size":2087,"mtime":1611389674004,"results":"17","hashOfConfig":"11"},{"size":4494,"mtime":1611915709108,"results":"18","hashOfConfig":"11"},{"size":124,"mtime":1611576554997,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"res0r1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\index.tsx",[],["41","42"],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\reportWebVitals.ts",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\MainMenu\\MainMenu.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\ContactPage\\ContactPage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\UserLoginPage\\UserLoginPage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\HomePage\\HomePage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\components\\CategoryPage\\CategoryPage.tsx",[],"C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\api\\api.ts",["43"],"import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { ApiConfig } from \"../config/api.config\";\r\n \r\nexport default function api(\r\n    path: string,\r\n    method: 'get' | 'post' | 'patch' | 'delete',\r\n    body: any | undefined\r\n){\r\n    return new Promise<ApiResponse>((resolve) => {\r\n        const requestData = {            \r\n            method: method,\r\n            url: path,\r\n            baseURL: ApiConfig.API_URL,\r\n            data: JSON.stringify(body),\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': getToken(),\r\n            }            \r\n        };\r\n \r\n        axios(requestData)\r\n        .then(res => responseHandler(res, resolve))\r\n        .catch(async err => {\r\n                // STATUS CODE 401 - Bad Token\r\n                // TODO: Refresh tokena i pokusati ponovo\r\n                //       Ne mozemo da osvezimo token, preusmeriti korisnik na login\r\n                if(err.response.status === 401){\r\n                    const newToken = await refreshToken();\r\n \r\n                    if(!newToken){\r\n                        const response: ApiResponse = {\r\n                            status: 'login',\r\n                            data: null\r\n                        };\r\n \r\n                        return resolve(response);\r\n                    }\r\n \r\n                    saveToken(newToken);\r\n \r\n                    requestData.headers['Authorization'] = getToken();\r\n \r\n                    return await repeatRequest(requestData, resolve);\r\n                }\r\n \r\n            const response: ApiResponse = {\r\n                status: 'error',\r\n                data: err,\r\n            };\r\n            resolve(response);\r\n        });\r\n    });   \r\n}\r\n \r\nexport interface ApiResponse{\r\n    status: 'ok' | 'error' | 'login';\r\n    data: any;\r\n \r\n}\r\n \r\nasync function responseHandler(\r\n    res: AxiosResponse<any>,\r\n    resolve: (value: ApiResponse) => void,    \r\n){\r\n    // nepovoljan ishod kada server ne odradi posao\r\n    if(res.status <200 || res.status >= 300){       \r\n \r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: res.data\r\n        };\r\n \r\n        return resolve(response);\r\n    }\r\n \r\n    // nepovoljan ishod kada aplikacija ne odradi posao\r\n    let response: ApiResponse = {\r\n        status: 'ok',\r\n        data:res.data\r\n    };    \r\n \r\n    if(res.data.statusCode < 0){\r\n        response = {\r\n            status: 'login',\r\n            data: null\r\n        };        \r\n    }else{\r\n        response = {\r\n            status: 'ok',\r\n            data: res.data\r\n        };\r\n    }\r\n \r\n    resolve(response);\r\n}\r\n \r\nfunction getToken(): string{\r\n    const token = localStorage.getItem('api_token');\r\n    return 'Berer ' + token;\r\n}\r\n \r\nfunction saveToken(token: string){\r\n    localStorage.setItem('api_token', token);\r\n}\r\n \r\nfunction getRefreshToken(): string{\r\n    const token = localStorage.getItem('api_refresh_token');\r\n    return token + '';\r\n}\r\n \r\nfunction saveRefreshToken(token: string){\r\n    localStorage.setItem('api_refresh_token', token);\r\n}\r\n \r\nasync function refreshToken(): Promise<string>{\r\n    const path = \"auth/user/refresh\";\r\n    const data = {\r\n        token: getRefreshToken()\r\n    }\r\n \r\n    const refreshTokenRequestData: AxiosRequestConfig = {            \r\n        method: 'post',\r\n        url: path,\r\n        baseURL: ApiConfig.API_URL,\r\n        data: JSON.stringify(data),\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }            \r\n    };\r\n \r\n    const refreshTokenResponse: { data: { token: string | undefined } } = await axios(refreshTokenRequestData);\r\n \r\n    if(!refreshTokenResponse.data.token){\r\n        return \"\";\r\n    }\r\n \r\n    return refreshTokenResponse.data.token;\r\n}\r\n \r\nasync function repeatRequest(\r\n    requestData: AxiosRequestConfig,\r\n    resolve: (value: ApiResponse | Promise<ApiResponse>) => void\r\n) {\r\n    axios(requestData)\r\n    .then(res => {\r\n        let response: ApiResponse\r\n \r\n        if(res.status === 401){\r\n            response = {\r\n                status: 'login',\r\n                data: null\r\n            };\r\n        }else{\r\n            response = {\r\n                status: 'ok',\r\n                data: res,\r\n            };\r\n        }\r\n \r\n        return resolve(response);\r\n    })\r\n    .catch(err => {\r\n        const response: ApiResponse = {\r\n            status: 'error',\r\n            data: err\r\n        }\r\n        return resolve(response);\r\n    });\r\n}","C:\\Users\\alex5\\Desktop\\Projekti\\front-end\\src\\config\\api.config.ts",["44"],"import { TIMEOUT } from \"dns\";\r\n\r\nexport const ApiConfig = {\r\n    API_URL: 'http://localhost:3000/',\r\n    TIMEOUT: 15000,\r\n}",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":111,"column":10,"nodeType":"51","messageId":"52","endLine":111,"endColumn":26},{"ruleId":"49","severity":1,"message":"53","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":17},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'saveRefreshToken' is defined but never used.","Identifier","unusedVar","'TIMEOUT' is defined but never used.","no-global-assign","no-unsafe-negation"]